package com.homedepot.ptc.framework;

import java.awt.event.KeyEvent;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Wait;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;

import com.google.common.base.Function;
import com.homedepot.ptc.framework.robot.RobotService;

public class ScriptBase {

	protected WebDriver driver;
	
	
	@BeforeMethod
	public void setUp() throws Exception {
		driver = new FirefoxDriver();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
		driver.manage().window().maximize();
		driver.navigate().to("url");
		
		delayFor(3000);
		RobotService robotService = RobotService.getInstance();
		robotService.type("userid");
		robotService.keyPress(KeyEvent.VK_TAB);
		robotService.type("password");
		robotService.type(KeyEvent.VK_ENTER);
		delayFor(3000);
		//waitForElement(By.id("MAINFORM"));
		driver.manage().timeouts().pageLoadTimeout(60, TimeUnit.SECONDS);
		
		List<WebElement> ele = driver.findElements(By.tagName("frame"));
		System.out.println("Number of frames in a page :" + ele.size());
		for(WebElement el : ele){
		   //Returns the Id of a frame.
		   System.out.println("Frame Id :" + el.getAttribute("id"));
		   //Returns the Name of a frame.
		   System.out.println("Frame name :" + el.getAttribute("name"));
		}
		    
		    
	}
	
	
	@AfterMethod
	public void tearDown() throws Exception {
		driver.close();
		//driver.quit();
	}

	
	public void delayFor(int time){
		 try {
				Thread.sleep(time);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
	}
	
	public WebElement waitForElement(final By locator) {
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(30, TimeUnit.SECONDS)
				.pollingEvery(500, TimeUnit.MILLISECONDS)
				.ignoring(NoSuchElementException.class);

		WebElement foo = wait.until(new Function<WebDriver, WebElement>() {
			public WebElement apply(WebDriver driver) {
				return driver.findElement(locator);
			}
		});
		return foo;
	}
}
